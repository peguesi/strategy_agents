{
  "name": "Strategic Activity Monitor Agent",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Every 30 Minutes",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:3030/search",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "start_time",
                "value": "={{ $now.minus({minutes: 30}).toISO() }}"
              },
              {
                "name": "end_time", 
                "value": "={{ $now.toISO() }}"
              },
              {
                "name": "limit",
                "value": "100"
              }
            ]
          }
        }
      },
      "id": "get-activity",
      "name": "Get Screenpipe Activity",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [460, 300],
      "notes": "Screenpipe doesn't have built-in N8N node yet"
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "Analyze the provided Screenpipe activity data and provide strategic insights. Current time: {{ $now.toISO() }}",
        "chatModel": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
        "chatModelParameters": {
          "options": {
            "azureOpenAIApiKey": "={{ $credentials.azureOpenAI.api_key }}",
            "azureOpenAIApiInstanceName": "YOUR-AZURE-RESOURCE",
            "azureOpenAIApiDeploymentName": "YOUR-DEPLOYMENT-NAME",
            "azureOpenAIApiVersion": "2024-02-15-preview"
          }
        },
        "systemMessage": "You are the Strategic Activity Monitor Agent for a developer working toward a €50k revenue goal.\n\nCURRENT CONTEXT:\n- Team ID: 42918051-c76f-45cd-a15a-175978ec47c6\n- Primary Revenue Goal: €50k through Simply BAU client work\n- Work Schedule: Primary focus 9 PM - 12 AM\n- Current Projects: Rooted (behavioral charts), Simply BAU, VibeCoding, Screenpipe\n\nPROJECT CLASSIFICATION:\n- Rooted: family, behavior, chart, children, canva, behavioral\n- Simply BAU: client, automation, revenue, contract, simply, €50k, bau\n- VibeCoding: vibecoding, platform, scale, framework, vibe\n- Screenpipe: screenpipe, activity, capture, monitor, agent\n- Savage: property, management, rental, savage\n- Auto-Apply: job, application, auto-apply, career\n\nREVENUE CLASSIFICATION:\n- High Revenue: Simply BAU (direct €50k goal)\n- Medium Revenue: VibeCoding, Rooted, Screenpipe (enables revenue)\n- Low Revenue: Savage, Auto-Apply (operational)\n\nDECISION FRAMEWORK:\n- High Revenue work should be 60%+ of time\n- Deep work sessions preferred for Implementation tasks\n- Unknown projects with >20 min activity need investigation\n\nRESPOND in this JSON structure:\n{\n  \"session_analysis\": {\n    \"project_detected\": \"string\",\n    \"work_type\": \"Implementation|Strategy|Research|Client Work\",\n    \"revenue_impact\": \"High|Medium|Low Revenue\",\n    \"focus_quality\": \"Deep Work|Moderate|Fragmented\",\n    \"confidence\": 0.8\n  },\n  \"strategic_alerts\": [{\"type\": \"string\", \"message\": \"string\", \"severity\": \"high|medium|low\"}],\n  \"recommendations\": [\"string\"],\n  \"linear_actions\": [{\"action\": \"update_issue|create_issue\", \"issue_title\": \"string\", \"reason\": \"string\"}]\n}",
        "memory": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "memoryParameters": {
          "sessionIdTemplate": "strategic-agent-{{ $workflow.id }}",
          "contextWindowLength": 10
        },
        "outputParser": "@n8n/n8n-nodes-langchain.outputParserStructured",
        "outputParserParameters": {
          "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"session_analysis\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"project_detected\": {\"type\": \"string\"},\n        \"work_type\": {\"type\": \"string\"},\n        \"revenue_impact\": {\"type\": \"string\"},\n        \"focus_quality\": {\"type\": \"string\"},\n        \"confidence\": {\"type\": \"number\"}\n      },\n      \"required\": [\"project_detected\", \"work_type\", \"revenue_impact\", \"focus_quality\", \"confidence\"]\n    },\n    \"strategic_alerts\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\"type\": \"string\"},\n          \"message\": {\"type\": \"string\"},\n          \"severity\": {\"type\": \"string\"}\n        }\n      }\n    },\n    \"recommendations\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"string\"}\n    },\n    \"linear_actions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"action\": {\"type\": \"string\"},\n          \"issue_title\": {\"type\": \"string\"},\n          \"reason\": {\"type\": \"string\"}\n        }\n      }\n    }\n  },\n  \"required\": [\"session_analysis\", \"strategic_alerts\", \"recommendations\", \"linear_actions\"]\n}",
          "outputKey": "analysis"
        }
      },
      "id": "strategic-agent",
      "name": "Strategic Analysis Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "// Parse Agent Response with Structured Output\nconst agentResponse = $input.all()[0];\nlet analysis = {};\n\ntry {\n  // Agent with structured output should return parsed data directly\n  if (agentResponse.analysis) {\n    analysis = agentResponse.analysis;\n  } else if (agentResponse.output && agentResponse.output.analysis) {\n    analysis = agentResponse.output.analysis;\n  } else {\n    // Fallback parsing for unstructured response\n    const responseText = agentResponse.text || agentResponse.output || JSON.stringify(agentResponse);\n    \n    if (responseText.includes('{')) {\n      const jsonStart = responseText.indexOf('{');\n      const jsonEnd = responseText.lastIndexOf('}') + 1;\n      const jsonStr = responseText.substring(jsonStart, jsonEnd);\n      analysis = JSON.parse(jsonStr);\n    } else {\n      throw new Error('No valid JSON found in response');\n    }\n  }\n  \n  // Ensure all required fields exist\n  if (!analysis.session_analysis) {\n    analysis.session_analysis = {\n      project_detected: 'Unknown',\n      work_type: 'Unknown',\n      revenue_impact: 'Unknown',\n      focus_quality: 'Unknown',\n      confidence: 0.5\n    };\n  }\n  \n  if (!analysis.strategic_alerts) analysis.strategic_alerts = [];\n  if (!analysis.recommendations) analysis.recommendations = [];\n  if (!analysis.linear_actions) analysis.linear_actions = [];\n  \n} catch (error) {\n  console.log('Parsing error:', error);\n  analysis = {\n    session_analysis: {\n      project_detected: 'Parse Error',\n      work_type: 'Unknown',\n      revenue_impact: 'Unknown',\n      focus_quality: 'Unknown', \n      confidence: 0\n    },\n    strategic_alerts: [{\n      type: 'system_error',\n      message: 'Agent response parsing failed: ' + error.message,\n      severity: 'high'\n    }],\n    recommendations: ['Check agent configuration and response format'],\n    linear_actions: []\n  };\n}\n\n// Add metadata\nanalysis.timestamp = new Date().toISOString();\nanalysis.agent_raw_response = agentResponse;\n\nreturn [analysis];"
      },
      "id": "parse-response", 
      "name": "Parse Agent Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-linear-actions",
              "leftValue": "={{ $json.linear_actions.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-actions",
      "name": "Has Linear Actions?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "resource": "issue",
        "operation": "getAll",
        "teamId": "42918051-c76f-45cd-a15a-175978ec47c6",
        "filters": {
          "state": {
            "type": {
              "nin": ["completed", "canceled"]
            }
          }
        },
        "returnAll": false,
        "limit": 50
      },
      "id": "linear-get-issues",
      "name": "Linear - Get Active Issues",
      "type": "n8n-nodes-base.linear",
      "typeVersion": 1,
      "position": [1340, 200],
      "credentials": {
        "linearApi": {
          "id": "linear-credentials",
          "name": "Linear API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Match Linear Actions with Existing Issues\nconst analysis = $('Parse Agent Response').all()[0];\nconst linearIssues = $input.all();\n\nlet actionsToExecute = [];\n\n// Process each recommended action\nanalysis.linear_actions.forEach(action => {\n  if (action.action === 'update_issue') {\n    // Find matching issue by title or project keywords\n    const matchingIssue = linearIssues.find(issue => {\n      const titleMatch = issue.title.toLowerCase().includes(action.issue_title.toLowerCase());\n      const projectMatch = analysis.session_analysis.project_detected !== 'Unknown' && \n                          issue.project?.name.toLowerCase().includes(analysis.session_analysis.project_detected.toLowerCase());\n      return titleMatch || projectMatch;\n    });\n    \n    if (matchingIssue && matchingIssue.state.name === 'Backlog') {\n      actionsToExecute.push({\n        type: 'update_status',\n        issue_id: matchingIssue.id,\n        issue_identifier: matchingIssue.identifier,\n        issue_title: matchingIssue.title,\n        current_status: matchingIssue.state.name,\n        new_status: 'In Progress',\n        reason: action.reason,\n        confidence: analysis.session_analysis.confidence\n      });\n    }\n  } else if (action.action === 'create_issue') {\n    // Only create if confidence is high\n    if (analysis.session_analysis.confidence > 0.7) {\n      actionsToExecute.push({\n        type: 'create_new',\n        title: action.issue_title,\n        description: `**Auto-created from activity detection**\\n\\n${action.reason}\\n\\n**Detected Context:**\\n- Project: ${analysis.session_analysis.project_detected}\\n- Work Type: ${analysis.session_analysis.work_type}\\n- Revenue Impact: ${analysis.session_analysis.revenue_impact}\\n- Confidence: ${Math.round(analysis.session_analysis.confidence * 100)}%`,\n        project_hint: analysis.session_analysis.project_detected,\n        work_type: analysis.session_analysis.work_type,\n        revenue_impact: analysis.session_analysis.revenue_impact,\n        team_id: '42918051-c76f-45cd-a15a-175978ec47c6'\n      });\n    }\n  }\n});\n\nreturn actionsToExecute.map(action => ({ \n  ...action, \n  timestamp: new Date().toISOString(),\n  analysis_context: analysis.session_analysis\n}));"
      },
      "id": "prepare-linear-actions",
      "name": "Prepare Linear Actions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-update",
              "leftValue": "={{ $json.type }}",
              "rightValue": "update_status",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "action-type-switch",
      "name": "Action Type?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [1780, 200]
    },
    {
      "parameters": {
        "resource": "issue",
        "operation": "update",
        "issueId": "={{ $json.issue_id }}",
        "updateFields": {
          "stateId": "IN_PROGRESS_STATE_ID"
        }
      },
      "id": "linear-update-issue",
      "name": "Linear - Update Issue Status",
      "type": "n8n-nodes-base.linear",
      "typeVersion": 1,
      "position": [2000, 100],
      "credentials": {
        "linearApi": {
          "id": "linear-credentials",
          "name": "Linear API"
        }
      }
    },
    {
      "parameters": {
        "resource": "issue",
        "operation": "create",
        "teamId": "={{ $json.team_id }}",
        "title": "={{ $json.title }}",
        "additionalFields": {
          "description": "={{ $json.description }}",
          "priority": 3
        }
      },
      "id": "linear-create-issue",
      "name": "Linear - Create New Issue",
      "type": "n8n-nodes-base.linear",
      "typeVersion": 1,
      "position": [2000, 300],
      "credentials": {
        "linearApi": {
          "id": "linear-credentials",
          "name": "Linear API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-alerts",
              "leftValue": "={{ $json.strategic_alerts.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-alerts",
      "name": "Has Strategic Alerts?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "postToChannel",
        "channelId": "strategic-alerts",
        "text": "🤖 **Strategic Activity Alert**\\n\\n⏰ **Time**: {{ $now.toLocaleTimeString() }}\\n🎯 **Project**: {{ $('Parse Agent Response').first().json.session_analysis.project_detected }}\\n⚙️ **Work Type**: {{ $('Parse Agent Response').first().json.session_analysis.work_type }}\\n💰 **Revenue Impact**: {{ $('Parse Agent Response').first().json.session_analysis.revenue_impact }}\\n🧠 **Focus Quality**: {{ $('Parse Agent Response').first().json.session_analysis.focus_quality }}\\n📊 **Confidence**: {{ Math.round($('Parse Agent Response').first().json.session_analysis.confidence * 100) }}%\\n\\n{{ $json.strategic_alerts.map(alert => `${alert.severity === 'high' ? '🔴' : alert.severity === 'medium' ? '🟡' : '🔵'} ${alert.message}`).join('\\n') }}\\n\\n💡 **Recommendations**:\\n{{ $json.recommendations.map(rec => `• ${rec}`).join('\\n') }}",
        "otherOptions": {
          "username": "Strategic Monitor",
          "icon_emoji": ":robot_face:"
        }
      },
      "id": "slack-alert",
      "name": "Slack - Send Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1340, 500],
      "credentials": {
        "slackApi": {
          "id": "slack-credentials",
          "name": "Slack API"
        }
      }
    }
  ],
  "connections": {
    "Every 30 Minutes": {
      "main": [
        [
          {
            "node": "Get Screenpipe Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Screenpipe Activity": {
      "main": [
        [
          {
            "node": "Strategic Analysis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Strategic Analysis Agent": {
      "main": [
        [
          {
            "node": "Parse Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Agent Response": {
      "main": [
        [
          {
            "node": "Has Linear Actions?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Has Strategic Alerts?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Linear Actions?": {
      "main": [
        [
          {
            "node": "Linear - Get Active Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Linear - Get Active Issues": {
      "main": [
        [
          {
            "node": "Prepare Linear Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Linear Actions": {
      "main": [
        [
          {
            "node": "Action Type?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Action Type?": {
      "main": [
        [
          {
            "node": "Linear - Update Issue Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Linear - Create New Issue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Strategic Alerts?": {
      "main": [
        [
          {
            "node": "Slack - Send Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["agent", "screenpipe", "linear", "strategic", "builtin-nodes"],
  "triggerCount": 0,
  "updatedAt": "2025-06-16T12:15:00.000Z",
  "versionId": 1
}