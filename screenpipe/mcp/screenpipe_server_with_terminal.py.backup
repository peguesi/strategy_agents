#!/usr/bin/env python3
"""
Enhanced Screenpipe MCP Server with Terminal Control for Strategy Agents
Comprehensive MCP server with Screenpipe integration and terminal control capabilities
"""

import asyncio
import httpx
import nest_asyncio
from mcp.server import NotificationOptions, Server
from mcp.server.models import InitializationOptions
import mcp.types as types
import mcp.server.stdio
import argparse
import json
import platform
import sys
import os
import subprocess
import tempfile
from pathlib import Path
from datetime import datetime, timedelta
import logging

# Enable nested event loops (needed for some environments)
nest_asyncio.apply()

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Detect OS
CURRENT_OS = platform.system()
IS_MACOS = CURRENT_OS == "Darwin"
IS_WINDOWS = CURRENT_OS == "Windows"
IS_LINUX = CURRENT_OS == "Linux"

# Parse command line arguments
parser = argparse.ArgumentParser(description='Enhanced Screenpipe MCP Server with Terminal Control')
parser.add_argument('--port', type=int, default=3030, help='Port number for the screenpipe API (default: 3030)')
parser.add_argument('--data-dir', type=str, help='Directory for screenpipe data storage')
args = parser.parse_args()

# Initialize server
server = Server("screenpipe-strategy-terminal")

# Constants
SCREENPIPE_API = f"http://localhost:{args.port}"

# Set up paths
base_path = Path(__file__).parent.parent
data_path = Path(args.data_dir) if args.data_dir else base_path / "data"
logs_path = base_path / "logs"

# Ensure directories exist
data_path.mkdir(exist_ok=True)
logs_path.mkdir(exist_ok=True)

def log_to_file(message):
    """Log messages to our MCP log file"""
    log_file = logs_path / "mcp_server.log"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_file, "a") as f:
        f.write(f"[{timestamp}] {message}\n")

def execute_terminal_command(command, timeout=30):
    """Execute a command in the terminal and return the result"""
    try:
        if IS_MACOS:
            # Use osascript to send command to iTerm2 or Terminal
            script = f'''
            tell application "iTerm"
                if (count of windows) = 0 then
                    create window with default profile
                end if
                tell current session of current window
                    write text "{command}"
                end tell
            end tell
            '''
            
            # Try iTerm2 first, fallback to Terminal
            try:
                result = subprocess.run(
                    ['osascript', '-e', script],
                    capture_output=True,
                    text=True,
                    timeout=timeout
                )
                if result.returncode == 0:
                    return {"success": True, "output": f"Command sent to iTerm2: {command}"}
            except:
                pass
            
            # Fallback to Terminal app
            script = f'''
            tell application "Terminal"
                if (count of windows) = 0 then
                    do script "{command}"
                else
                    do script "{command}" in front window
                end if
            end tell
            '''
            
            result = subprocess.run(
                ['osascript', '-e', script],
                capture_output=True,
                text=True,
                timeout=timeout
            )
            
            if result.returncode == 0:
                return {"success": True, "output": f"Command sent to Terminal: {command}"}
            else:
                return {"success": False, "error": f"AppleScript error: {result.stderr}"}
        
        else:
            # For non-macOS systems, execute directly
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=timeout
            )
            
            return {
                "success": True,
                "output": result.stdout,
                "error": result.stderr,
                "return_code": result.returncode
            }
            
    except subprocess.TimeoutExpired:
        return {"success": False, "error": f"Command timed out after {timeout} seconds"}
    except Exception as e:
        return {"success": False, "error": str(e)}

def send_control_character(char):
    """Send a control character to the active terminal"""
    try:
        if IS_MACOS:
            # Map control characters
            ctrl_chars = {
                "C": "^C",
                "Z": "^Z", 
                "D": "^D",
                "L": "^L"
            }
            
            if char.upper() in ctrl_chars:
                script = f'''
                tell application "iTerm"
                    tell current session of current window
                        write text "{ctrl_chars[char.upper()]}"
                    end tell
                end tell
                '''
                
                result = subprocess.run(
                    ['osascript', '-e', script],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result.returncode == 0:
                    return {"success": True, "output": f"Sent Ctrl-{char.upper()} to terminal"}
                else:
                    return {"success": False, "error": result.stderr}
            else:
                return {"success": False, "error": f"Unsupported control character: {char}"}
        else:
            return {"success": False, "error": "Control characters only supported on macOS"}
            
    except Exception as e:
        return {"success": False, "error": str(e)}

@server.list_tools()
async def handle_list_tools() -> list[types.Tool]:
    """List available tools including screenpipe and terminal control."""
    
    # Core screenpipe tools
    tools = [
        types.Tool(
            name="search-content",
            description=(
                "Search through screenpipe recorded content (OCR text, audio transcriptions, UI elements). "
                "Use this to find specific content that has appeared on your screen or been spoken. "
                "Results include timestamps, app context, and the content itself."
            ),
            inputSchema={
                "type": "object",
                "properties": {
                    "q": {"type": "string", "description": "Search query to find in recorded content"},
                    "content_type": {"type": "string", "enum": ["all","ocr", "audio","ui"], "default": "all"},
                    "limit": {"type": "integer", "default": 10},
                    "offset": {"type": "integer", "default": 0},
                    "start_time": {"type": "string", "format": "date-time"},
                    "end_time": {"type": "string", "format": "date-time"},
                    "app_name": {"type": "string"},
                    "window_name": {"type": "string"},
                    "min_length": {"type": "integer"},
                    "max_length": {"type": "integer"}
                }
            },
        ),
        
        # Terminal control tools
        types.Tool(
            name="execute-terminal-command",
            description=(
                "Execute a command in the active terminal (iTerm2 or Terminal on macOS). "
                "This sends the command to the currently active terminal session. "
                "Use this for running scripts, starting applications, or any terminal operations."
            ),
            inputSchema={
                "type": "object",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "The command to execute in the terminal"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Timeout in seconds (default: 30)",
                        "default": 30
                    }
                },
                "required": ["command"]
            }
        ),
        
        types.Tool(
            name="send-control-character",
            description=(
                "Send a control character to the active terminal (macOS only). "
                "Useful for interrupting processes, clearing screen, etc. "
                "Supported characters: C (Ctrl-C), Z (Ctrl-Z), D (Ctrl-D), L (Ctrl-L)"
            ),
            inputSchema={
                "type": "object",
                "properties": {
                    "character": {
                        "type": "string",
                        "description": "Control character to send (C, Z, D, L)",
                        "enum": ["C", "Z", "D", "L"]
                    }
                },
                "required": ["character"]
            }
        ),
        
        types.Tool(
            name="start-repl",
            description=(
                "Start a REPL (Read-Eval-Print Loop) in the terminal. "
                "Supports Python, Node.js, and other interpreters."
            ),
            inputSchema={
                "type": "object",
                "properties": {
                    "language": {
                        "type": "string",
                        "description": "Programming language for REPL",
                        "enum": ["python", "python3", "node", "nodejs", "ipython", "bash", "zsh"]
                    }
                },
                "required": ["language"]
            }
        ),
        
        # Productivity analysis tools
        types.Tool(
            name="analyze-productivity",
            description="Analyze productivity patterns from screenpipe data",
            inputSchema={
                "type": "object",
                "properties": {
                    "hours_back": {"type": "integer", "default": 8},
                    "focus_apps": {"type": "array", "items": {"type": "string"}}
                }
            }
        ),
        
        types.Tool(
            name="find-coding-sessions", 
            description="Find recent coding or development work sessions",
            inputSchema={
                "type": "object",
                "properties": {
                    "hours_back": {"type": "integer", "default": 24},
                    "language": {"type": "string"},
                    "project": {"type": "string"}
                }
            }
        ),
        
        # Cross-platform control tools
        types.Tool(
            name="pixel-control",
            description="Control mouse and keyboard at the pixel level",
            inputSchema={
                "type": "object",
                "properties": {
                    "action_type": {"type": "string", "enum": ["WriteText", "KeyPress", "MouseMove", "MouseClick"]},
                    "data": {"oneOf": [{"type": "string"}, {"type": "object"}]}
                },
                "required": ["action_type", "data"]
            }
        ),
    ]
    
    # Add MacOS-specific tools only if running on MacOS
    if IS_MACOS:
        macos_tools = [
            types.Tool(
                name="find-elements",
                description="Find UI elements with a specific role in an application",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "app": {"type": "string"},
                        "role": {"type": "string"},
                        "max_results": {"type": "integer", "default": 10}
                    },
                    "required": ["app", "role"]
                }
            ),
            types.Tool(
                name="open-application",
                description="Open an application by name",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "app_name": {"type": "string"}
                    },
                    "required": ["app_name"]
                }
            ),
            types.Tool(
                name="open-url",
                description="Open a URL in a browser",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "url": {"type": "string"},
                        "browser": {"type": "string"}
                    },
                    "required": ["url"]
                }
            ),
        ]
        tools.extend(macos_tools)
    
    return tools

@server.call_tool()
async def handle_call_tool(
    name: str, 
    arguments: dict | None
) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
    """Handle tool execution requests."""
    if not arguments:
        arguments = {}

    log_to_file(f"Tool called: {name} with args: {arguments}")

    # Terminal control tools
    if name == "execute-terminal-command":
        command = arguments.get("command", "")
        timeout = arguments.get("timeout", 30)
        
        if not command:
            return [types.TextContent(
                type="text",
                text="No command provided"
            )]
        
        log_to_file(f"Executing terminal command: {command}")
        result = execute_terminal_command(command, timeout)
        
        if result["success"]:
            return [types.TextContent(
                type="text",
                text=f"✅ {result['output']}"
            )]
        else:
            return [types.TextContent(
                type="text",
                text=f"❌ Error: {result['error']}"
            )]
    
    elif name == "send-control-character":
        character = arguments.get("character", "")
        
        if not character:
            return [types.TextContent(
                type="text",
                text="No control character specified"
            )]
        
        log_to_file(f"Sending control character: Ctrl-{character}")
        result = send_control_character(character)
        
        if result["success"]:
            return [types.TextContent(
                type="text", 
                text=f"✅ {result['output']}"
            )]
        else:
            return [types.TextContent(
                type="text",
                text=f"❌ Error: {result['error']}"
            )]
    
    elif name == "start-repl":
        language = arguments.get("language", "python")
        
        # Map language names to commands
        repl_commands = {
            "python": "python",
            "python3": "python3", 
            "node": "node",
            "nodejs": "node",
            "ipython": "ipython",
            "bash": "bash",
            "zsh": "zsh"
        }
        
        command = repl_commands.get(language, language)
        
        log_to_file(f"Starting {language} REPL")
        result = execute_terminal_command(command)
        
        if result["success"]:
            return [types.TextContent(
                type="text",
                text=f"✅ Started {language} REPL: {result['output']}"
            )]
        else:
            return [types.TextContent(
                type="text",
                text=f"❌ Failed to start {language} REPL: {result['error']}"
            )]

    # Screenpipe search functionality (existing code)
    elif name == "search-content":
        async with httpx.AsyncClient() as client:
            try:
                # Build query parameters
                params = {k: v for k, v in arguments.items() if v is not None}        
                
                response = await client.get(
                    f"{SCREENPIPE_API}/search",
                    params=params,
                    timeout=30.0
                )
                response.raise_for_status()
                
                try:
                    data = json.loads(response.text)
                except json.JSONDecodeError as json_error:
                    return [types.TextContent(
                        type="text",
                        text=f"failed to parse JSON response: {json_error}"
                    )]
                
                results = data.get("data", [])
                    
            except Exception as e:
                log_to_file(f"Search error: {str(e)}")
                return [types.TextContent(
                    type="text",
                    text=f"failed to search screenpipe: {str(e)}"
                )]
                    
            # Format results
            if not results:
                return [types.TextContent(
                    type="text", 
                    text="no results found"
                )]

            # Format each result based on content type
            formatted_results = []
            for result in results:
                if "content" not in result:
                    continue
                
                content = result["content"]
                if result.get("type") == "OCR":
                    text = (
                        f"OCR Text: {content.get('text', 'N/A')}\n"
                        f"App: {content.get('app_name', 'N/A')}\n"
                        f"Window: {content.get('window_name', 'N/A')}\n"
                        f"Time: {content.get('timestamp', 'N/A')}\n"
                        "---\n"
                    )
                elif result.get("type") == "Audio":
                    text = (
                        f"Audio Transcription: {content.get('transcription', 'N/A')}\n"
                        f"Device: {content.get('device_name', 'N/A')}\n"
                        f"Time: {content.get('timestamp', 'N/A')}\n"
                        "---\n"
                    )
                else:
                    continue
                
                formatted_results.append(text)
                
            return [types.TextContent(
                type="text",
                text="Search Results:\n\n" + "\n".join(formatted_results)
            )]
    
    elif name == "analyze-productivity":
        try:
            hours_back = arguments.get("hours_back", 8)
            focus_apps = arguments.get("focus_apps", ["VSCode", "Code", "Terminal", "Linear", "Notion"])
            
            # Calculate time range
            end_time = datetime.now()
            start_time = end_time - timedelta(hours=hours_back)
            
            async with httpx.AsyncClient() as client:
                # Get all OCR data for the time period
                response = await client.get(
                    f"{SCREENPIPE_API}/search",
                    params={
                        "content_type": "ocr",
                        "start_time": start_time.isoformat() + "Z",
                        "end_time": end_time.isoformat() + "Z",
                        "limit": 1000
                    },
                    timeout=30.0
                )
                response.raise_for_status()
                data = response.json()
                results = data.get("data", [])
                
                # Analyze productivity patterns
                app_usage = {}
                focus_time = 0
                total_time = 0
                
                for result in results:
                    content = result.get("content", {})
                    app_name = content.get("app_name", "Unknown")
                    
                    if app_name not in app_usage:
                        app_usage[app_name] = 0
                    app_usage[app_name] += 1
                    
                    if app_name in focus_apps:
                        focus_time += 1
                    total_time += 1
                
                # Calculate focus percentage
                focus_percentage = (focus_time / total_time * 100) if total_time > 0 else 0
                
                # Sort apps by usage
                sorted_apps = sorted(app_usage.items(), key=lambda x: x[1], reverse=True)
                
                # Generate insights
                insights = f"""Productivity Analysis ({hours_back} hours):

Focus Time: {focus_percentage:.1f}% ({focus_time}/{total_time} activities)

Top Applications:
"""
                for app, count in sorted_apps[:10]:
                    percentage = (count / total_time * 100) if total_time > 0 else 0
                    focus_indicator = "🎯" if app in focus_apps else "📱"
                    insights += f"{focus_indicator} {app}: {count} activities ({percentage:.1f}%)\n"
                
                insights += f"\nData points analyzed: {total_time}"
                
                return [types.TextContent(
                    type="text",
                    text=insights
                )]
                
        except Exception as e:
            log_to_file(f"Productivity analysis error: {str(e)}")
            return [types.TextContent(
                type="text",
                text=f"failed to analyze productivity: {str(e)}"
            )]
    
    elif name == "find-coding-sessions":
        try:
            hours_back = arguments.get("hours_back", 24)
            language = arguments.get("language")
            project = arguments.get("project")
            
            # Calculate time range
            end_time = datetime.now()
            start_time = end_time - timedelta(hours=hours_back)
            
            async with httpx.AsyncClient() as client:
                # Search for coding-related content
                search_params = {
                    "start_time": start_time.isoformat() + "Z",
                    "end_time": end_time.isoformat() + "Z",
                    "limit": 500
                }
                
                # Add app filter for coding apps
                coding_apps = ["VSCode", "Code", "Terminal", "iTerm", "Xcode", "IntelliJ", "PyCharm"]
                
                coding_sessions = []
                
                for app in coding_apps:
                    search_params["app_name"] = app
                    response = await client.get(
                        f"{SCREENPIPE_API}/search",
                        params=search_params,
                        timeout=30.0
                    )
                    if response.status_code == 200:
                        data = response.json()
                        results = data.get("data", [])
                        
                        for result in results:
                            content = result.get("content", {})
                            text = content.get("text", "")
                            
                            # Filter by language if specified
                            if language and language.lower() not in text.lower():
                                continue
                            
                            # Filter by project if specified  
                            if project and project.lower() not in text.lower():
                                continue
                            
                            coding_sessions.append({
                                "app": app,
                                "time": content.get("timestamp", ""),
                                "text": text[:100] + "..." if len(text) > 100 else text,
                                "window": content.get("window_name", "")
                            })
                
                # Sort by time
                coding_sessions.sort(key=lambda x: x["time"], reverse=True)
                
                if not coding_sessions:
                    return [types.TextContent(
                        type="text",
                        text=f"No coding sessions found in the last {hours_back} hours"
                    )]
                
                # Generate summary
                summary = f"Found {len(coding_sessions)} coding activities in the last {hours_back} hours:\n\n"
                
                for i, session in enumerate(coding_sessions[:20], 1):
                    try:
                        dt = datetime.fromisoformat(session["time"].replace("Z", "+00:00"))
                        time_str = dt.strftime("%m/%d %H:%M")
                    except:
                        time_str = session["time"][:16]
                    
                    summary += f"{i}. {session['app']} - {time_str}\n"
                    summary += f"   Window: {session['window']}\n"
                    summary += f"   Content: {session['text']}\n\n"
                
                if len(coding_sessions) > 20:
                    summary += f"... and {len(coding_sessions) - 20} more sessions"
                
                return [types.TextContent(
                    type="text",
                    text=summary
                )]
                
        except Exception as e:
            log_to_file(f"Coding sessions error: {str(e)}")
            return [types.TextContent(
                type="text",
                text=f"failed to find coding sessions: {str(e)}"
            )]
    
    elif name == "pixel-control":
        async with httpx.AsyncClient() as client:
            try:
                action = {
                    "type": arguments.get("action_type"),
                    "data": arguments.get("data")
                }
                
                response = await client.post(
                    f"{SCREENPIPE_API}/experimental/operator/pixel",
                    json={"action": action},
                    timeout=10.0
                )
                response.raise_for_status()
                data = response.json()
                
                if not data.get("success", False):
                    return [types.TextContent(
                        type="text",
                        text=f"failed to perform input control: {data.get('error', 'unknown error')}"
                    )]
                
                action_type = arguments.get("action_type")
                action_data = arguments.get("data")
                
                if action_type == "WriteText":
                    result_text = f"successfully typed text: '{action_data}'"
                elif action_type == "KeyPress":
                    result_text = f"successfully pressed key: '{action_data}'"
                elif action_type == "MouseMove":
                    result_text = f"successfully moved mouse to coordinates: x={action_data.get('x')}, y={action_data.get('y')}"
                elif action_type == "MouseClick":
                    result_text = f"successfully clicked {action_data} mouse button"
                else:
                    result_text = "successfully performed input control action"
                
                return [types.TextContent(
                    type="text",
                    text=result_text
                )]
                
            except Exception as e:
                return [types.TextContent(
                    type="text",
                    text=f"failed to perform input control: {str(e)}"
                )]
    
    # MacOS-specific tools
    elif name == "open-application" and IS_MACOS:
        app_name = arguments.get("app_name", "")
        if not app_name:
            return [types.TextContent(
                type="text",
                text="No application name provided"
            )]
        
        try:
            result = subprocess.run(
                ['open', '-a', app_name],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                return [types.TextContent(
                    type="text",
                    text=f"successfully opened application '{app_name}'"
                )]
            else:
                return [types.TextContent(
                    type="text",
                    text=f"failed to open application '{app_name}': {result.stderr}"
                )]
        except Exception as e:
            return [types.TextContent(
                type="text",
                text=f"failed to open application: {str(e)}"
            )]
    
    elif name == "open-url" and IS_MACOS:
        url = arguments.get("url", "")
        browser = arguments.get("browser")
        
        if not url:
            return [types.TextContent(
                type="text",
                text="No URL provided"
            )]
        
        try:
            if browser:
                result = subprocess.run(
                    ['open', '-a', browser, url],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
            else:
                result = subprocess.run(
                    ['open', url],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
            
            if result.returncode == 0:
                return [types.TextContent(
                    type="text",
                    text=f"successfully opened URL: {url}"
                )]
            else:
                return [types.TextContent(
                    type="text",
                    text=f"failed to open URL: {result.stderr}"
                )]
        except Exception as e:
            return [types.TextContent(
                type="text",
                text=f"failed to open URL: {str(e)}"
            )]
    
    else:
        raise ValueError(f"unknown tool: {name}")

async def run():
    """Run the enhanced MCP server."""
    log_to_file("Starting Enhanced Screenpipe MCP Server with Terminal Control")
    
    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="screenpipe-strategy-terminal",
                server_version="2.0.0",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
            ),
        )

if __name__ == "__main__":
    asyncio.run(run())
