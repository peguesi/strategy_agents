{
  "createdAt": "2025-06-16T13:09:00.647Z",
  "updatedAt": "2025-06-18T20:00:44.000Z",
  "id": "qYHxZmr3VbZLcDS0",
  "name": "PM_Agent",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "custom",
              "cronExpression": "*/30 * * * *"
            }
          ]
        }
      },
      "id": "cbe1b8ac-48c0-4f39-9e82-733fe8a10b63",
      "name": "Every 30 Minutes",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -680,
        -360
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "channel": "lock-the-fuck-in",
        "text": "=ü§ñ **Strategic Activity Report**  {{ $json.output }}",
        "otherOptions": {},
        "attachments": []
      },
      "id": "2263a941-65ba-4baa-8510-69ac7af66bdb",
      "name": "Slack - Send Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        100,
        -360
      ],
      "credentials": {
        "slackOAuth2Api": {
          "id": "PSWz3lLmG3GfB9iu",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "model": "o3-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        -600,
        -160
      ],
      "id": "369fc9cb-e458-4387-8407-78cc4d813a06",
      "name": "Azure OpenAI Chat Model",
      "credentials": {
        "azureOpenAiApi": {
          "id": "A1NENhqCP6I4tohe",
          "name": "Azure Open AI account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "# Strategic Project Management Agent - Complete Instructions\n\n## **MISSION STATEMENT**\nYou are a Strategic Project Management Agent designed to maximize ‚Ç¨50k annual revenue through intelligent Linear project management and Screenpipe behavioral analysis. Your primary function is to ensure all work aligns with the Simply BAU ‚Üí AutomateBau ‚Üí VibeCoding ‚Üí Business Scale progression while maintaining strategic focus on high-revenue activities.\n\n## **CRITICAL CONSTRAINT - NO DATA SIMULATION**\n**NEVER simulate, mock, or create fictional Linear issues, project data, or API responses.**\n**ALWAYS use actual Linear GraphQL API calls to retrieve real workspace data.**\n**If Linear API is unavailable, report the service issue - do not simulate responses.**\n**All strategic analysis MUST be based exclusively on real Linear workspace data.**\n\n## **IMPORTANT**\nExecute the complete strategic assessment I outlined - run all Linear queries, analyze Screenpipe data, and deliver the strategic report. Proceed autonomously without asking for further instructions.\n\n### **Data Validation Protocol**\nBefore any strategic analysis:\n1. **Verify API connectivity** - confirm Linear GraphQL responds\n2. **Validate issue IDs** - ensure all referenced issues exist in workspace  \n3. **Confirm real data** - cross-check issue identifiers with actual workspace\n4. **Report data gaps** - if insufficient data, request specific information rather than simulate\n\n---\n\n## **CORE RESPONSIBILITIES**\n\n### **1. Revenue-First Decision Making**\n- **ALWAYS prioritize High Revenue labeled issues** over any other work\n- **Block non-revenue work** during high-revenue opportunities  \n- **Calculate and track** revenue impact of all activities\n- **Alert when daily work** deviates >50% from revenue-generating activities\n\n### **2. Strategic Project Orchestration**\n- **Monitor Simply BAU initiative** progress toward ‚Ç¨50k target\n- **Identify cross-project leverage** opportunities that unlock VibeCoding\n- **Ensure client delivery excellence** to fuel framework development\n- **Balance immediate revenue** with strategic platform building\n\n### **3. Behavioral Intelligence Integration**\n- **Analyze Screenpipe data** to understand actual work patterns vs intended priorities\n- **Detect focus patterns** and recommend optimal work scheduling\n- **Identify productivity obstacles** and suggest workflow improvements\n- **Track time allocation** by Linear label categories\n\n### **4. Linear Workspace Management**\n- **Maintain strategic labeling** across all issues using the defined taxonomy\n- **Update project health** based on real progress and blockers\n- **Manage dependencies** to prevent high-revenue work from being blocked\n- **Coordinate team collaboration** when Jeremiah or others are involved\n\n---\n\n## **KEY WORKSPACE IDENTIFIERS**\n\n- **Team ID**: `42918051-c76f-45cd-a15a-175978ec47c6` (Pegues Innovations)\n- **Primary Initiative**: Simply BAU (‚Ç¨50k revenue target, deadline 2025-12-31)\n- **Core Projects**: Client Acquisition & Contracts, Client Discovery Framework, Client Implementation Template\n\n---\n\n## **LABEL SYSTEM & PRIORITY MATRIX**\n\n### **Revenue Impact Labels (Priority Order)**\n1. **High Revenue** - Direct client work, immediately billable, contract-related\n2. **Medium Revenue** - Framework development that enables multiple clients\n3. **Low Revenue** - Research, operational tasks, system maintenance\n\n### **Work Type Labels**\n- **Client Work** - Direct client delivery, highest priority when High Revenue\n- **Strategy** - Planning, analysis, decision-making\n- **Implementation** - Building, coding, creating deliverables\n- **Research** - Investigation, learning, discovery\n\n### **Size Estimation Labels**\n- **XS** (<2 hours) - Quick wins, small fixes\n- **S** (2-4 hours) - Focused work sessions\n- **M** (1-2 days) - Moderate complexity\n- **L** (3-5 days) - Significant projects\n- **XL** (1+ weeks) - Major initiatives\n\n### **Context Labels**\n- **Deep-Work** - Requires 2+ hour focused blocks\n- **Quick-Win** - Can be done in fragmented time\n- **Unlocks VibeCoding** - Strategic value for platform scaling\n- **Related Automation** - Framework development opportunities\n\n### **Dependency Labels**\n- **Blocks Client** - Prevents client delivery\n- **Related** - Cross-project dependencies\n\n---\n\n## **DAILY OPERATIONS FRAMEWORK**\n\n### **Morning Routine (Execute at 9 AM)**\n1. **Query Screenpipe** for previous day's work analysis:\n   ```\n   Search timeframe: yesterday 9 AM to 6 PM\n   Analyze: Linear issues worked on, time allocation by labels, focus patterns\n   ```\n\n2. **Assess High Revenue Pipeline**:\n   ```graphql\n   query GetHighRevenueIssues($teamId: String!) {\n     team(id: $teamId) {\n       issues(filter: { \n         labels: { some: { name: { eq: \"High Revenue\" }}},\n         state: { type: { nin: [\"completed\", \"canceled\"] }}\n       }) {\n         nodes {\n           id\n           identifier\n           title\n           priority\n           state { name }\n           project { name }\n           assignee { name }\n           updatedAt\n         }\n       }\n     }\n   }\n   ```\n\n3. **Identify Today's Strategic Focus**:\n   - List all High Revenue issues not blocked\n   - Schedule Deep-Work items during protected time blocks\n   - Flag any blocking dependencies that need immediate attention\n\n4. **Generate Morning Brief**:\n   ```\n   üéØ **STRATEGIC FOCUS**: [Primary High Revenue work]\n   ‚ö° **QUICK WINS**: [XS/S tasks for fragmented time]\n   üö´ **BLOCKERS**: [Issues preventing progress]\n   üìä **REVENUE IMPACT**: [Expected daily contribution to ‚Ç¨50k goal]\n   ```\n\n### **Work Session Monitoring (Every 30 Minutes)**\n1. **Activity Classification**:\n   - Query Screenpipe for current screen content\n   - Match activity to Linear issue labels\n   - Track time allocation vs planned priorities\n\n2. **Stuck Loop Detection**:\n   - Alert if same task >2 hours without Linear progress updates\n   - Suggest context switching or break strategies\n\n3. **Priority Drift Protection**:\n   - Alert if >50% time spent on non-High Revenue work\n   - Recommend immediate refocus to strategic priorities\n\n### **End of Day Review (6 PM)**\n1. **Progress Assessment**:\n   ```graphql\n   mutation UpdateIssueProgress($id: String!, $input: IssueUpdateInput!) {\n     issueUpdate(id: $id, input: $input) {\n       success\n       issue {\n         id\n         title\n         state { name }\n       }\n     }\n   }\n   ```\n\n2. **Tomorrow's Planning**:\n   - Identify carry-over High Revenue priorities\n   - Schedule Deep-Work blocks for complex tasks\n   - Plan Quick-Win tasks for meeting gaps\n\n3. **Strategic Alignment Report**:\n   ```\n   üìà **REVENUE PROGRESS**: [Daily contribution assessment]\n   üéØ **STRATEGIC FOCUS**: [% time on High Revenue work]\n   üîÑ **CROSS-PROJECT VALUE**: [Framework development opportunities identified]\n   ‚ö†Ô∏è **RISKS**: [Potential blockers or delays]\n   ```\n\n---\n\n## **WEEKLY STRATEGIC REVIEW (MONDAYS)**\n\n### **Initiative Health Assessment**\n1. **Query Simply BAU Progress**:\n   ```graphql\n   query GetInitiativeProgress($id: String!) {\n     initiative(id: $id) {\n       id\n       name\n       targetDate\n       projects {\n         nodes {\n           id\n           name\n           health\n           progress\n           issues(filter: { state: { type: { nin: [\"completed\", \"canceled\"] }}}) {\n             nodes {\n               id\n               title\n               labels { nodes { name }}\n               priority\n             }\n           }\n         }\n       }\n     }\n   }\n   ```\n\n2. **Revenue Goal Tracking**:\n   - Calculate progress toward ‚Ç¨50k annual target\n   - Assess quarterly milestones and runway\n   - Identify acceleration opportunities\n\n3. **Cross-Project Analysis**:\n   - Find issues with \"Unlocks VibeCoding\" potential\n   - Identify reusable patterns from client work\n   - Plan framework development activities\n\n### **Capacity Planning**\n1. **Analyze Work Distribution**:\n   - Review Screenpipe data for actual time allocation\n   - Compare planned vs actual work by labels\n   - Optimize schedule for deep-work requirements\n\n2. **Resource Allocation**:\n   - Balance client delivery vs framework development\n   - Plan collaboration touchpoints with Jeremiah\n   - Schedule strategic planning time\n\n---\n\n## **BEHAVIORAL ANALYSIS PATTERNS**\n\n### **Focus Pattern Recognition**\nFrom Screenpipe data, identify:\n- **Peak Deep-Work Hours**: When 2+ hour focused sessions occur\n- **Context Switch Triggers**: What causes priority changes\n- **Distraction Patterns**: Common interruption sources\n- **Productive Tool Combinations**: Most effective work environments\n\n### **Work Classification Rules**\nMap Screenpipe content to Linear labels:\n- **\"Claude.ai\" + \"strategy\"** ‚Üí Strategy label\n- **\"Lovable\" + \"implementation\"** ‚Üí Implementation label  \n- **\"Linear\" + \"client name\"** ‚Üí Client Work label\n- **\"GitHub\" + \"commits\"** ‚Üí Implementation label\n- **\"Google Sheets\" + \"revenue\"** ‚Üí Strategy label\n\n### **Productivity Optimization**\n- **Recommend Deep-Work scheduling** during identified peak hours\n- **Suggest Quick-Win tasks** during fragmented time\n- **Alert on context-switching** that reduces efficiency\n- **Propose focus optimization** strategies\n\n---\n\n## **DECISION TREES & AUTOMATION**\n\n### **Priority Decision Tree**\n```\nIssue Created/Updated ‚Üí \n  Contains \"High Revenue\" label? ‚Üí \n    YES: Move to top priority queue\n    NO: Contains \"Medium Revenue\" label? ‚Üí\n      YES: Check for \"Unlocks VibeCoding\" ‚Üí\n        YES: Strategic priority\n        NO: Standard medium priority\n      NO: Low priority or backlog\n```\n\n### **Dependency Management**\n```\nIssue Blocked? ‚Üí\n  Blocks High Revenue work? ‚Üí\n    YES: IMMEDIATE escalation and resolution\n    NO: Standard dependency tracking\n```\n\n### **Time Allocation Alerts**\n```\nDaily Time Analysis ‚Üí\n  <40% High Revenue work? ‚Üí\n    Alert: \"Revenue focus required\"\n  >80% on single project? ‚Üí\n    Alert: \"Consider cross-project value opportunities\"\n```\n\n---\n\n## **COMMUNICATION TEMPLATES**\n\n### **Daily Focus Brief**\n```\nüéØ **TODAY'S STRATEGIC FOCUS**\nHigh Revenue Priority: [Issue ID - Title]\nDeep-Work Block: [Time] - [Task]\nQuick Wins Available: [List of XS/S tasks]\n\nüí∞ **REVENUE IMPACT**\nExpected Daily Contribution: ‚Ç¨[X] toward ‚Ç¨50k goal\nCompletion Risk: [On Track/At Risk/Blocked]\n\n‚ö° **OPTIMIZATION NOTES**\nFocus Pattern: [Based on Screenpipe analysis]\nRecommended Schedule: [Deep-work timing suggestions]\n```\n\n### **Weekly Strategic Update**\n```\nüìä **SIMPLY BAU INITIATIVE HEALTH**\nOverall Progress: [X%] toward ‚Ç¨50k target\nThis Week: ‚Ç¨[X] revenue contribution\nNext Week Goal: ‚Ç¨[X] target\n\nüéØ **PROJECT STATUS**\n‚úÖ On Track: [List projects]\n‚ö†Ô∏è At Risk: [List projects + reasons]\nüö´ Blocked: [List projects + blocking issues]\n\nüîÑ **CROSS-PROJECT OPPORTUNITIES**\nFramework Development: [Opportunities identified]\nVibeCoding Unlock Potential: [Strategic items]\nClient Delivery Excellence: [Quality metrics]\n\nüìà **BEHAVIORAL INSIGHTS**\nMost Productive: [Hours/environment]\nOptimization Opportunity: [Suggested improvements]\nStrategic Alignment: [% time on High Revenue work]\n```\n\n### **Emergency Escalation Alerts**\n```\nüö® **REVENUE BLOCKER DETECTED**\nIssue: [ID - Title]\nImpact: Blocking ‚Ç¨[X] revenue opportunity\nRequired Action: [Specific next steps]\nDeadline: [Critical timeline]\n```\n\n---\n\n## **SUCCESS METRICS & KPIs**\n\n### **Daily Metrics**\n- **Strategic Time Allocation**: % time on High Revenue work (Target: >60%)\n- **Deep-Work Efficiency**: Hours of uninterrupted focus time\n- **Issue Velocity**: High Revenue issues completed per day\n- **Revenue Contribution**: Daily progress toward ‚Ç¨50k goal\n\n### **Weekly Metrics**\n- **Project Health**: Number of projects on track vs at risk\n- **Cross-Project Value**: Issues with framework development potential\n- **Client Satisfaction**: Delivery quality and timeline adherence\n- **Strategic Alignment**: Balance of immediate revenue vs platform building\n\n### **Monthly Metrics**\n- **Revenue Progress**: Actual vs planned progress toward ‚Ç¨50k\n- **Framework Development**: Reusable patterns and templates created\n- **Operational Efficiency**: Time from issue creation to completion\n- **Strategic Evolution**: Progress toward AutomateBau and VibeCoding readiness\n\n---\n\n## **ERROR HANDLING & CONTINGENCIES**\n\n### **API Failures**\n- **Linear API Down**: Switch to manual tracking, sync when restored\n- **Screenpipe Service Issues**: Use manual time logging, resume analysis when available\n- **Authentication Errors**: Alert for credential refresh needed\n\n### **Priority Conflicts**\n- **Multiple High Revenue Issues**: Use client contract value and deadline urgency for tiebreaking\n- **Resource Constraints**: Escalate need for additional support or scope adjustment\n- **Competing Deadlines**: Negotiate timeline adjustments based on revenue impact\n\n### **Data Quality Issues**\n- **Missing Labels**: Prompt for proper categorization based on issue content\n- **Inconsistent Estimates**: Flag for review and recalibration\n- **Broken Dependencies**: Alert and provide resolution recommendations\n\n---\n\nThis strategic framework ensures your agent operates with complete understanding of your business goals, workflow patterns, and technical implementation requirements while maintaining laser focus on revenue generation and strategic platform development.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -360,
        -360
      ],
      "id": "9805d8d8-ca56-4da5-bc27-58afdb499213",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "toolDescription": "# Screenpipe Analysis Node - Detailed Configuration & Operations\n\n## **NODE OVERVIEW**\n\n### **Purpose**\nThe Screenpipe Analysis Node provides behavioral intelligence by analyzing captured screen and audio data to understand actual work patterns, optimize productivity, and ensure strategic alignment with Linear project priorities.\n\n### **Core Capabilities**\n- **Work Pattern Analysis**: Understand actual time allocation vs planned priorities\n- **Focus Session Detection**: Identify deep-work periods and productivity patterns\n- **Tool Usage Mapping**: Connect screen activity to Linear issue progress\n- **Context Switch Analysis**: Detect productivity-disrupting interruptions\n- **Strategic Alignment Tracking**: Measure time spent on high-revenue activities\n\n---\n\n## **API CONFIGURATION**\n\n### **Base Endpoint**\n```\nhttp://localhost:3030\n```\n\n### **Authentication**\nNone required (local API)\n\n### **Node Configuration**\n```json\n{\n  \"parameters\": {\n    \"method\": \"GET\",\n    \"url\": \"http://localhost:3030/search\",\n    \"sendQuery\": true,\n    \"sendHeaders\": false,\n    \"sendBody\": false,\n    \"responseFormat\": \"json\"\n  }\n}\n```\n\n---\n\n## **CORE ANALYSIS OPERATIONS**\n\n### **1. Daily Work Pattern Analysis**\n**Purpose**: Understand previous day's work allocation by Linear labels\n**Frequency**: Daily morning routine (9 AM)\n\n#### **Query Structure**\n```\nGET /search?start_time=2025-06-15T09:00:00Z&end_time=2025-06-15T18:00:00Z&limit=100\n```\n\n#### **Analysis Logic**\n```javascript\nconst analyzeWorkPatterns = (screenpipeData) => {\n  const workSessions = screenpipeData.data.map(entry => {\n    return {\n      timestamp: entry.timestamp,\n      content: entry.content,\n      contentType: entry.content_type,\n      workType: classifyWorkType(entry.content),\n      linearIssue: extractLinearIssue(entry.content),\n      toolUsed: extractTool(entry.content)\n    };\n  });\n  \n  return {\n    totalWorkTime: calculateWorkTime(workSessions),\n    timeByLabel: groupByLinearLabel(workSessions),\n    focusSessions: identifyFocusSessions(workSessions),\n    contextSwitches: countContextSwitches(workSessions),\n    toolEfficiency: analyzeToolUsage(workSessions)\n  };\n};\n```\n\n#### **Work Classification Patterns**\n```javascript\nconst classifyWorkType = (content) => {\n  // High Revenue Indicators\n  if (content.includes('client') || content.includes('contract') || content.includes('proposal')) {\n    return { label: 'High Revenue', type: 'Client Work' };\n  }\n  \n  // Strategy Work Indicators  \n  if (content.includes('linear') && content.includes('planning')) {\n    return { label: 'High Revenue', type: 'Strategy' };\n  }\n  \n  // Implementation Work Indicators\n  if (content.includes('lovable') || content.includes('github') || content.includes('coding')) {\n    return { label: 'Implementation', type: 'Development' };\n  }\n  \n  // Framework Development Indicators\n  if (content.includes('template') || content.includes('automation') || content.includes('framework')) {\n    return { label: 'Medium Revenue', type: 'Related Automation' };\n  }\n  \n  return { label: 'Unclassified', type: 'Unknown' };\n};\n```\n\n### **2. Focus Session Detection**\n**Purpose**: Identify deep-work periods and productivity patterns\n**Frequency**: Real-time during work hours, end-of-day analysis\n\n#### **Query for Current Session**\n```\nGET /search?start_time=2025-06-16T14:00:00Z&end_time=2025-06-16T16:00:00Z&content_type=ocr\n```\n\n#### **Focus Analysis Logic**\n```javascript\nconst analyzeFocusSessions = (screenpipeData) => {\n  const sessions = [];\n  let currentSession = null;\n  \n  screenpipeData.data.forEach(entry => {\n    const tool = extractTool(entry.content);\n    const task = extractTask(entry.content);\n    \n    if (!currentSession || \n        tool !== currentSession.tool || \n        task !== currentSession.task ||\n        isContextSwitch(entry, currentSession.lastEntry)) {\n      \n      if (currentSession) {\n        sessions.push(currentSession);\n      }\n      \n      currentSession = {\n        startTime: entry.timestamp,\n        tool: tool,\n        task: task,\n        entries: [entry],\n        duration: 0\n      };\n    } else {\n      currentSession.entries.push(entry);\n      currentSession.duration = calculateDuration(\n        currentSession.startTime, \n        entry.timestamp\n      );\n    }\n    \n    currentSession.lastEntry = entry;\n  });\n  \n  return sessions.filter(session => session.duration >= 30); // 30+ minute sessions\n};\n```\n\n### **3. Strategic Alignment Measurement**\n**Purpose**: Track actual time allocation vs Linear priority labels\n**Frequency**: Every 30 minutes during work hours, end-of-day summary\n\n#### **Strategic Time Analysis**\n```javascript\nconst analyzeStrategicAlignment = (screenpipeData, linearIssues) => {\n  const timeAllocation = {\n    'High Revenue': 0,\n    'Medium Revenue': 0, \n    'Low Revenue': 0,\n    'Unclassified': 0\n  };\n  \n  const workSessions = screenpipeData.data.map(entry => {\n    const workType = classifyWorkType(entry.content);\n    const linkedIssue = findLinearIssue(entry.content, linearIssues);\n    \n    if (linkedIssue) {\n      const revenueLabel = linkedIssue.labels.find(l => \n        l.name.includes('Revenue')\n      );\n      return {\n        ...entry,\n        revenueLabel: revenueLabel?.name || 'Unclassified',\n        duration: calculateDuration(entry)\n      };\n    }\n    \n    return {\n      ...entry,\n      revenueLabel: workType.label,\n      duration: calculateDuration(entry)\n    };\n  });\n  \n  // Calculate time allocation percentages\n  workSessions.forEach(session => {\n    timeAllocation[session.revenueLabel] += session.duration;\n  });\n  \n  const totalTime = Object.values(timeAllocation).reduce((a, b) => a + b, 0);\n  \n  return {\n    rawMinutes: timeAllocation,\n    percentages: Object.keys(timeAllocation).reduce((acc, key) => {\n      acc[key] = (timeAllocation[key] / totalTime * 100).toFixed(1);\n      return acc;\n    }, {}),\n    strategicAlignmentScore: timeAllocation['High Revenue'] / totalTime * 100,\n    recommendations: generateAlignmentRecommendations(timeAllocation)\n  };\n};\n```\n\n### **4. Tool Usage & Productivity Analysis**\n**Purpose**: Optimize workflow by understanding tool effectiveness\n**Frequency**: Weekly analysis, tool-specific optimization\n\n#### **Tool Effectiveness Query**\n```\nGET /search?q=lovable&content_type=ocr&limit=50\nGET /search?q=linear&content_type=ocr&limit=50  \nGET /search?q=claude&content_type=ocr&limit=50\n```\n\n#### **Productivity Analysis**\n```javascript\nconst analyzeToolProductivity = (screenpipeData) => {\n  const toolSessions = groupByTool(screenpipeData.data);\n  \n  return Object.keys(toolSessions).map(tool => {\n    const sessions = toolSessions[tool];\n    const avgSessionLength = calculateAverageSessionLength(sessions);\n    const taskCompletionRate = analyzeTaskCompletion(sessions);\n    const contextSwitchFrequency = analyzeContextSwitches(sessions);\n    \n    return {\n      tool: tool,\n      totalTime: sessions.reduce((sum, s) => sum + s.duration, 0),\n      sessionCount: sessions.length,\n      avgSessionLength: avgSessionLength,\n      productivityScore: calculateProductivityScore({\n        avgSessionLength,\n        taskCompletionRate,\n        contextSwitchFrequency\n      }),\n      recommendations: generateToolRecommendations(tool, sessions)\n    };\n  });\n};\n```\n\n### **5. Context Switch Detection & Optimization**\n**Purpose**: Identify and reduce productivity-disrupting interruptions\n**Frequency**: Real-time monitoring, daily optimization reports\n\n#### **Context Switch Analysis**\n```javascript\nconst detectContextSwitches = (screenpipeData) => {\n  const switches = [];\n  let previousContext = null;\n  \n  screenpipeData.data.forEach((entry, index) => {\n    const currentContext = {\n      tool: extractTool(entry.content),\n      project: extractProject(entry.content),\n      task: extractTask(entry.content)\n    };\n    \n    if (previousContext && isSignificantSwitch(previousContext, currentContext)) {\n      switches.push({\n        timestamp: entry.timestamp,\n        from: previousContext,\n        to: currentContext,\n        switchType: categorizeSwitchType(previousContext, currentContext),\n        potentialCost: estimateProductivityCost(previousContext, currentContext)\n      });\n    }\n    \n    previousContext = currentContext;\n  });\n  \n  return {\n    totalSwitches: switches.length,\n    costliestSwitches: switches.sort((a, b) => b.potentialCost - a.potentialCost).slice(0, 5),\n    switchPatterns: identifyPatterns(switches),\n    recommendations: generateSwitchRecommendations(switches)\n  };\n};\n```\n\n---\n\n## **ADVANCED ANALYSIS OPERATIONS**\n\n### **6. Deep-Work Session Optimization**\n**Purpose**: Identify optimal conditions for focused work\n**Frequency**: Weekly pattern analysis\n\n#### **Deep-Work Pattern Recognition**\n```javascript\nconst analyzeDeepWorkPatterns = (screenpipeData) => {\n  const deepSessions = screenpipeData.data.filter(entry => {\n    return entry.duration >= 90 && // 90+ minute sessions\n           !hasInterruptions(entry) &&\n           isProductiveWork(entry.content);\n  });\n  \n  return {\n    optimalHours: findPeakProductivityHours(deepSessions),\n    optimalTools: findMostProductiveTools(deepSessions),\n    environmentFactors: analyzeEnvironmentalFactors(deepSessions),\n    averageSessionLength: calculateAverageLength(deepSessions),\n    recommendations: {\n      schedulingAdvice: generateSchedulingAdvice(deepSessions),\n      environmentOptimization: generateEnvironmentAdvice(deepSessions),\n      toolOptimization: generateToolAdvice(deepSessions)\n    }\n  };\n};\n```\n\n### **7. Client Work Analysis**\n**Purpose**: Track and optimize client delivery work patterns\n**Frequency**: Daily during client work, weekly summary\n\n#### **Client Work Tracking**\n```\nGET /search?q=client&start_time=2025-06-16T09:00:00Z&end_time=2025-06-16T18:00:00Z\n```\n\n```javascript\nconst analyzeClientWork = (screenpipeData, clientName) => {\n  const clientSessions = screenpipeData.data.filter(entry =>\n    entry.content.toLowerCase().includes(clientName.toLowerCase()) ||\n    entry.content.includes('contract') ||\n    entry.content.includes('proposal') ||\n    entry.content.includes('discovery')\n  );\n  \n  return {\n    totalClientTime: calculateTotalTime(clientSessions),\n    clientWorkBreakdown: {\n      discovery: filterByKeywords(clientSessions, ['discovery', 'assessment']),\n      implementation: filterByKeywords(clientSessions, ['development', 'building']),\n      communication: filterByKeywords(clientSessions, ['email', 'meeting', 'call']),\n      documentation: filterByKeywords(clientSessions, ['document', 'report', 'notes'])\n    },\n    deliveryEfficiency: calculateDeliveryEfficiency(clientSessions),\n    qualityIndicators: analyzeQualityIndicators(clientSessions)\n  };\n};\n```\n\n### **8. Strategic Opportunity Detection**\n**Purpose**: Identify framework development and automation opportunities\n**Frequency**: After client work completion, weekly pattern analysis\n\n#### **Opportunity Detection Logic**\n```javascript\nconst detectStrategicOpportunities = (screenpipeData) => {\n  const patterns = [];\n  \n  // Look for repeated manual processes\n  const repetitiveWork = findRepetitivePatterns(screenpipeData.data);\n  \n  // Identify automation opportunities\n  const automationOpportunities = repetitiveWork.filter(pattern => \n    pattern.frequency >= 3 && \n    pattern.manualSteps >= 5 &&\n    pattern.timeInvested >= 60 // minutes\n  );\n  \n  // Find template creation opportunities\n  const templateOpportunities = findTemplatePatterns(screenpipeData.data);\n  \n  return {\n    automationOpportunities: automationOpportunities.map(opp => ({\n      ...opp,\n      potentialSavings: calculateTimeSavings(opp),\n      implementationEffort: estimateImplementationEffort(opp),\n      strategicValue: calculateStrategicValue(opp)\n    })),\n    templateOpportunities: templateOpportunities.map(opp => ({\n      ...opp,\n      reuseability: calculateReuseability(opp),\n      frameworkPotential: assessFrameworkPotential(opp)\n    })),\n    recommendations: generateStrategicRecommendations({\n      automationOpportunities,\n      templateOpportunities\n    })\n  };\n};\n```\n\n---\n\n## **INTEGRATION PATTERNS**\n\n### **With Linear Node**\n1. **Cross-Reference Activities**: Match Screenpipe content with Linear issues\n2. **Validate Time Estimates**: Compare actual vs estimated work duration\n3. **Update Issue Progress**: Automatic progress updates based on work detection\n4. **Priority Optimization**: Adjust Linear priorities based on productivity patterns\n\n### **Strategic Decision Support**\n```javascript\nconst generateStrategicInsights = (screenpipeAnalysis, linearData) => {\n  return {\n    dailyFocus: {\n      planned: extractPlannedWork(linearData),\n      actual: extractActualWork(screenpipeAnalysis),\n      alignment: calculateAlignment(planned, actual),\n      recommendations: generateFocusRecommendations(planned, actual)\n    },\n    productivityOptimization: {\n      peakHours: screenpipeAnalysis.deepWorkPatterns.optimalHours,\n      optimalTools: screenpipeAnalysis.toolProductivity,\n      environmentFactors: screenpipeAnalysis.environmentOptimization\n    },\n    strategicProgress: {\n      revenueWorkPercentage: screenpipeAnalysis.strategicAlignment.percentages['High Revenue'],\n      frameworkOpportunities: screenpipeAnalysis.strategicOpportunities.templateOpportunities,\n      automationPotential: screenpipeAnalysis.strategicOpportunities.automationOpportunities\n    }\n  };\n};\n```\n\n---\n\n## **MONITORING & ALERTS**\n\n### **Real-Time Productivity Alerts**\n```javascript\nconst monitorProductivity = (screenpipeData) => {\n  const alerts = [];\n  \n  // Stuck Loop Detection\n  if (detectStuckLoop(screenpipeData, 120)) { // 2 hours on same task\n    alerts.push({\n      type: 'stuck_loop',\n      message: 'Same task for 2+ hours without progress',\n      recommendation: 'Consider context switch or break'\n    });\n  }\n  \n  // Low Revenue Work Alert\n  const revenueAlignment = analyzeStrategicAlignment(screenpipeData);\n  if (revenueAlignment.strategicAlignmentScore < 40) {\n    alerts.push({\n      type: 'revenue_drift',\n      message: 'Less than 40% time on High Revenue work',\n      recommendation: 'Refocus on strategic priorities'\n    });\n  }\n  \n  // Excessive Context Switching\n  const switches = detectContextSwitches(screenpipeData);\n  if (switches.totalSwitches > 10) { // More than 10 switches per hour\n    alerts.push({\n      type: 'context_switching',\n      message: 'Excessive context switching detected',\n      recommendation: 'Consolidate similar tasks'\n    });\n  }\n  \n  return alerts;\n};\n```\n\n### **Weekly Optimization Reports**\n```javascript\nconst generateWeeklyReport = (weekScreenpipeData) => {\n  return {\n    summary: {\n      totalWorkTime: calculateTotalWorkTime(weekScreenpipeData),\n      strategicAlignmentScore: calculateWeeklyAlignment(weekScreenpipeData),\n      productivityTrend: calculateProductivityTrend(weekScreenpipeData)\n    },\n    insights: {\n      mostProductiveHours: findWeeklyPeakHours(weekScreenpipeData),\n      leastProductivePeriods: findWeeklyLowPeriods(weekScreenpipeData),\n      toolEfficiencyRankings: rankToolEfficiency(weekScreenpipeData)\n    },\n    recommendations: {\n      scheduleOptimization: generateScheduleRecommendations(weekScreenpipeData),\n      processImprovements: generateProcessRecommendations(weekScreenpipeData),\n      strategicFocus: generateStrategicRecommendations(weekScreenpipeData)\n    }\n  };\n};\n```\n\n---\n\n## **PERFORMANCE OPTIMIZATION**\n\n### **Query Optimization**\n- **Time Range Limiting**: Query only necessary time windows\n- **Content Type Filtering**: Use `content_type=ocr` for screen analysis\n- **Pagination**: Use `limit` and `offset` for large datasets\n- **Keyword Filtering**: Pre-filter with specific search terms\n\n### **Data Processing Efficiency**\n- **Batch Processing**: Process multiple time periods together\n- **Caching**: Cache tool classifications and pattern recognitions\n- **Incremental Analysis**: Only analyze new data since last check\n- **Background Processing**: Run heavy analysis during low-activity periods\n\n### **Privacy & Security**\n- **Local Processing**: All analysis happens locally\n- **No Data Transmission**: Raw screenpipe data never leaves machine\n- **Selective Sharing**: Only insights and patterns shared with Linear\n- **User Control**: Configurable privacy levels for different analysis types\n\n---\n\n## **CONFIGURATION OPTIONS**\n\n### **Analysis Sensitivity**\n```json\n{\n  \"focusSessionMinimum\": 30,        // Minimum minutes for focus session\n  \"contextSwitchThreshold\": 5,      // Minutes to count as context switch\n  \"stuckLoopThreshold\": 120,        // Minutes to alert on stuck loop\n  \"strategicAlignmentTarget\": 60    // Target % for high revenue work\n}\n```\n\n### **Tool Classification Rules**\n```json\n{\n  \"toolPatterns\": {\n    \"claude\": [\"claude.ai\", \"anthropic\"],\n    \"linear\": [\"linear.app\", \"linear\"],\n    \"lovable\": [\"lovable.dev\", \"lovable\"],\n    \"github\": [\"github.com\", \"git\"],\n    \"screenpipe\": [\"screenpipe\", \"localhost:3030\"]\n  },\n  \"workTypePatterns\": {\n    \"client_work\": [\"client\", \"contract\", \"proposal\", \"discovery\"],\n    \"strategy\": [\"planning\", \"strategy\", \"roadmap\", \"goal\"],\n    \"implementation\": [\"coding\", \"development\", \"building\", \"create\"],\n    \"research\": [\"research\", \"investigate\", \"explore\", \"learn\"]\n  }\n}\n```\n\nThis Screenpipe node configuration provides comprehensive behavioral intelligence to optimize productivity and ensure strategic alignment with your ‚Ç¨50k revenue goal while maintaining complete privacy and local data processing.",
        "url": "https://28fc-2a0d-3344-1514-af10-35ec-bb77-7913-dcf.ngrok-free.app/search",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {}
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [
        -260,
        -140
      ],
      "id": "dd9dc52f-c9cd-45e4-b469-df260af5096f",
      "name": "Screenpipe Search Tool"
    },
    {
      "parameters": {
        "toolDescription": "# Linear GraphQL Node - Detailed Configuration & Operations\n\n## **NODE OVERVIEW**\n\n### **Purpose**\nThe Linear GraphQL Node serves as the primary interface for strategic project management, enabling the agent to query, analyze, and update Linear workspace data to maintain alignment with the ‚Ç¨50k revenue goal and Simply BAU initiative.\n\n### **Core Capabilities**\n- **Strategic Issue Analysis**: Query issues by revenue impact labels and priority\n- **Project Health Monitoring**: Track Simply BAU initiative and project progress  \n- **Dependency Management**: Identify and resolve blocking relationships\n- **Label-Based Intelligence**: Leverage the comprehensive labeling system for decision making\n- **Team Coordination**: Manage multi-person workflows and assignments\n\n---\n\n## **AUTHENTICATION CONFIGURATION**\n\n### **Credential Setup**\n```json\n{\n  \"name\": \"Linear API Header Auth\",\n  \"type\": \"httpHeaderAuth\",\n  \"data\": {\n    \"name\": \"Authorization\",\n    \"value\": \"Bearer lin_api_your_actual_key_here\"\n  }\n}\n```\n\n### **Node Configuration**\n```json\n{\n  \"parameters\": {\n    \"authentication\": \"httpHeaderAuth\",\n    \"requestMethod\": \"POST\",\n    \"endpoint\": \"https://api.linear.app/graphql\",\n    \"sendHeaders\": false,\n    \"sendQuery\": false,\n    \"sendBody\": true,\n    \"requestFormat\": \"json\",\n    \"responseFormat\": \"json\"\n  },\n  \"credentials\": {\n    \"httpHeaderAuth\": {\n      \"id\": \"your-credential-id\",\n      \"name\": \"Linear API Header Auth\"\n    }\n  }\n}\n```\n\n---\n\n## **STRATEGIC QUERY OPERATIONS**\n\n### **1. High Revenue Issue Analysis**\n**Purpose**: Identify and prioritize revenue-generating work\n**Frequency**: Daily morning routine, before work sessions\n\n```graphql\nquery GetHighRevenueIssues($teamId: String!) {\n  team(id: $teamId) {\n    issues(filter: { \n      labels: { some: { name: { eq: \"High Revenue\" }}},\n      state: { type: { nin: [\"completed\", \"canceled\"] }}\n    }) {\n      nodes {\n        id\n        identifier\n        title\n        description\n        priority\n        estimate\n        state {\n          name\n          type\n        }\n        labels {\n          nodes {\n            name\n            color\n          }\n        }\n        project {\n          id\n          name\n          health\n        }\n        assignee {\n          id\n          name\n        }\n        parent {\n          id\n          title\n        }\n        children {\n          nodes {\n            id\n            title\n            state { name }\n          }\n        }\n        updatedAt\n        dueDate\n      }\n    }\n  }\n}\n```\n\n**Variables**:\n```json\n{\n  \"teamId\": \"42918051-c76f-45cd-a15a-175978ec47c6\"\n}\n```\n\n### **2. Simply BAU Initiative Health Check**\n**Purpose**: Monitor overall strategic progress toward ‚Ç¨50k goal\n**Frequency**: Weekly strategic reviews, daily health checks\n\n```graphql\nquery GetSimplyBAUInitiative($teamId: String!) {\n  team(id: $teamId) {\n    initiatives {\n      nodes {\n        id\n        name\n        description\n        status\n        targetDate\n        projects {\n          nodes {\n            id\n            name\n            description\n            health\n            progress\n            targetDate\n            status\n            issues(filter: { state: { type: { nin: [\"completed\", \"canceled\"] }}}) {\n              nodes {\n                id\n                identifier\n                title\n                priority\n                labels {\n                  nodes {\n                    name\n                  }\n                }\n                state {\n                  name\n                  type\n                }\n                assignee {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n### **3. Cross-Project Value Analysis**\n**Purpose**: Identify framework development and VibeCoding unlock opportunities\n**Frequency**: Weekly strategic reviews, after client work completion\n\n```graphql\nquery GetCrossProjectOpportunities($teamId: String!) {\n  team(id: $teamId) {\n    issues(filter: {\n      labels: { some: { name: { in: [\"Unlocks VibeCoding\", \"Related Automation\", \"Medium Revenue\"] }}}\n    }) {\n      nodes {\n        id\n        identifier\n        title\n        description\n        priority\n        state {\n          name\n          type\n        }\n        labels {\n          nodes {\n            name\n            color\n          }\n        }\n        project {\n          name\n        }\n        parent {\n          id\n          title\n          labels {\n            nodes {\n              name\n            }\n          }\n        }\n        relations {\n          nodes {\n            relatedIssue {\n              id\n              title\n              project {\n                name\n              }\n            }\n            type\n          }\n        }\n        updatedAt\n      }\n    }\n  }\n}\n```\n\n### **4. Dependency & Blocker Detection**\n**Purpose**: Prevent high-revenue work from being blocked\n**Frequency**: Daily morning routine, before starting work\n\n```graphql\nquery GetBlockersAndDependencies($teamId: String!) {\n  team(id: $teamId) {\n    issues(filter: {\n      state: { type: { nin: [\"completed\", \"canceled\"] }}\n    }) {\n      nodes {\n        id\n        identifier\n        title\n        priority\n        state {\n          name\n          type\n        }\n        labels {\n          nodes {\n            name\n          }\n        }\n        relations {\n          nodes {\n            type\n            relatedIssue {\n              id\n              identifier\n              title\n              state {\n                name\n                type\n              }\n              labels {\n                nodes {\n                  name\n                }\n              }\n            }\n          }\n        }\n        parent {\n          id\n          title\n          state {\n            name\n          }\n        }\n        children {\n          nodes {\n            id\n            title\n            state {\n              name\n              type\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n### **5. Team Collaboration & Assignment Status**\n**Purpose**: Coordinate work with Jeremiah and track assignments\n**Frequency**: Daily coordination, weekly planning\n\n```graphql\nquery GetTeamWorkload($teamId: String!) {\n  team(id: $teamId) {\n    members {\n      nodes {\n        id\n        name\n        email\n        assignedIssues(filter: { \n          state: { type: { nin: [\"completed\", \"canceled\"] }}\n        }) {\n          nodes {\n            id\n            identifier\n            title\n            priority\n            state {\n              name\n            }\n            labels {\n              nodes {\n                name\n              }\n            }\n            estimate\n            dueDate\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n---\n\n## **STRATEGIC UPDATE OPERATIONS**\n\n### **1. Issue Priority & Label Management**\n**Purpose**: Maintain strategic alignment through proper labeling\n**Trigger**: Issue creation, priority changes, strategic shifts\n\n```graphql\nmutation UpdateIssueLabels($id: String!, $labelIds: [String!]!) {\n  issueUpdate(id: $id, input: { labelIds: $labelIds }) {\n    success\n    issue {\n      id\n      identifier\n      title\n      labels {\n        nodes {\n          id\n          name\n          color\n        }\n      }\n      priority\n      state {\n        name\n      }\n    }\n  }\n}\n```\n\n### **2. Project Health Updates**\n**Purpose**: Maintain accurate project status for strategic decisions\n**Trigger**: Weekly reviews, milestone completion, risk identification\n\n```graphql\nmutation UpdateProjectHealth($id: String!, $health: ProjectHealth!, $message: String!) {\n  projectUpdate(\n    input: {\n      projectId: $id\n      health: $health\n      body: $message\n    }\n  ) {\n    success\n    projectUpdate {\n      id\n      health\n      body\n      createdAt\n    }\n  }\n}\n```\n\n### **3. Strategic Issue Creation**\n**Purpose**: Create properly labeled issues that align with strategic framework\n**Trigger**: New client opportunities, framework development needs\n\n```graphql\nmutation CreateStrategicIssue($input: IssueCreateInput!) {\n  issueCreate(input: $input) {\n    success\n    issue {\n      id\n      identifier\n      title\n      description\n      priority\n      state {\n        name\n      }\n      labels {\n        nodes {\n          name\n        }\n      }\n      project {\n        name\n      }\n      assignee {\n        name\n      }\n    }\n  }\n}\n```\n\n**Example Input Structure**:\n```json\n{\n  \"input\": {\n    \"teamId\": \"42918051-c76f-45cd-a15a-175978ec47c6\",\n    \"title\": \"Client Discovery Session - ACME Corp\",\n    \"description\": \"Conduct comprehensive Simply BAU discovery session to document current automation state and identify ‚Ç¨10k implementation opportunity\",\n    \"priority\": 1,\n    \"labelIds\": [\"high-revenue-label-id\", \"client-work-label-id\", \"deep-work-label-id\"],\n    \"projectId\": \"client-discovery-framework-project-id\",\n    \"assigneeId\": \"your-user-id\",\n    \"dueDate\": \"2025-01-15\"\n  }\n}\n```\n\n---\n\n## **PERFORMANCE OPTIMIZATION**\n\n### **Query Complexity Management**\n- **Batch Related Queries**: Combine related data needs in single requests\n- **Pagination for Large Datasets**: Use `first/after` for >50 issues\n- **Field Selection**: Only request needed fields to reduce complexity\n- **Rate Limit Awareness**: Respect 1,500 requests/hour limit\n\n### **Error Handling Patterns**\n```javascript\nconst executeLinearQuery = async (query, variables) => {\n  try {\n    const response = await graphqlRequest(query, variables);\n    \n    if (response.errors) {\n      console.error('GraphQL Errors:', response.errors);\n      // Handle specific error types\n      return { success: false, errors: response.errors };\n    }\n    \n    return { success: true, data: response.data };\n  } catch (networkError) {\n    console.error('Network Error:', networkError);\n    // Implement retry logic\n    return { success: false, error: 'Network failure' };\n  }\n};\n```\n\n### **Data Caching Strategy**\n- **Cache Team Structure**: Team/project/initiative IDs (refresh weekly)\n- **Cache Label Mappings**: Label names to IDs (refresh when labels change)\n- **Fresh Query Results**: Issue states, priorities, assignments (always fresh)\n\n---\n\n## **INTEGRATION PATTERNS**\n\n### **With Screenpipe Analysis**\n1. **Query Linear for active issues**\n2. **Analyze Screenpipe for time spent on each**\n3. **Cross-reference work patterns with issue labels**\n4. **Update priorities based on actual vs planned focus**\n\n### **With Strategic Decision Making**\n1. **Query high-revenue issues for daily prioritization**\n2. **Assess cross-project opportunities for framework development**  \n3. **Check dependencies before committing to work sessions**\n4. **Update progress to maintain strategic visibility**\n\n### **With Team Coordination**\n1. **Query team workload for assignment planning**\n2. **Update issue assignments based on capacity**\n3. **Track collaboration needs and hand-offs**\n4. **Maintain communication through project updates**\n\n---\n\n## **MONITORING & ALERTS**\n\n### **Strategic Health Indicators**\n- **High Revenue Issue Count**: Should have 3-5 active at any time\n- **Blocked Issue Detection**: Any high-revenue work blocked >24hrs\n- **Label Compliance**: >90% of issues properly labeled\n- **Progress Velocity**: Weekly completion rate of strategic issues\n\n### **Data Quality Checks**\n- **Missing Project Assignments**: Issues without project context\n- **Inconsistent Labeling**: Issues lacking revenue or work type labels\n- **Orphaned Dependencies**: Broken or incomplete relationship links\n- **Stale Issue Detection**: No updates >7 days on active issues\n\nThis Linear node configuration ensures comprehensive strategic project management capabilities while maintaining the operational efficiency needed for ‚Ç¨50k revenue achievement.",
        "authentication": "headerAuth",
        "endpoint": "https://api.linear.app/graphql",
        "allowUnauthorizedCerts": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Ignore_SSL_Issues__Insecure_', ``, 'boolean') }}",
        "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}",
        "variables": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Variables', ``, 'json') }}",
        "operationName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Operation_Name', ``, 'string') }}"
      },
      "type": "n8n-nodes-base.graphqlTool",
      "typeVersion": 1.1,
      "position": [
        -100,
        -140
      ],
      "id": "03d6b7c9-43d0-4a9b-85a9-e421796df226",
      "name": "Linear GraphQL",
      "credentials": {
        "httpHeaderAuth": {
          "id": "RqzA9K1en4hbNrIt",
          "name": "Linear Header"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "strategic-agent-postgres-memory"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -440,
        -140
      ],
      "id": "1d7e7c63-0490-4efa-8f2c-a37328bd01d1",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "3oz0ltOQQdW3ISML",
          "name": "Postgres account"
        }
      }
    }
  ],
  "connections": {
    "Every 30 Minutes": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Slack - Send Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Screenpipe Search Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Linear GraphQL": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Berlin",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "eb8b58c4-4235-45c5-830a-d792ecfd3c6a",
  "triggerCount": 1,
  "tags": []
}
